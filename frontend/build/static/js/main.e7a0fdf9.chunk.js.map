{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/utils.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","components/OnlineUsers.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","externalUsers","setExternalusers","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","handleGenerateKey","username","salt","a","console","log","md","forge","sha256","create","update","seed","digest","toHex","prng","random","createInstance","seedFileSync","pki","rsa","generateKeyPair","bits","privateKey","publicKey","pubkey","publicKeyToPem","privkey","privateKeyToPem","submitHandler","title","status","duration","isClosable","position","config","headers","axios","post","data","name","privatekey","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","setName","confirmpassword","setConfirmpassword","pic","picLoading","setPicLoading","generateRandomString","length","characters","result","charactersLength","i","charAt","Math","floor","Homepage","maxW","centerContent","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","userId","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","dangerouslySetInnerHTML","__html","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","usero","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","encryptMessage","publicKeyPem","publicKeyFromPem","encrypted","encrypt","util","encodeUtf8","mgf1","sha1","encode64","error","decryptMessage","encryptedMessage","privateKeyPem","privateKeyFromPem","encryptedBytes","decode64","decrypted","decrypt","decodeUtf8","socket","selectedChatCompare","ENDPOINT","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","getOtherPersonPublicKeyandName","payload","myUserId","otherPerson","otherpubkey","grp","encmecontent","enccontent","emit","sendMessage","event","key","isGroupChat","person","io","on","close","newMessageRecieved","chat","includes","grp2","ArrowBack","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","latestMessage","lg","rightIcon","Add","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","OnlineUsers","onlineUsers","setOnlineUsers","fetchOnlineUsers","interval","setInterval","clearInterval","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7a0fdf9.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [externalUsers,setExternalusers] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n        externalUsers,\r\n        setExternalusers\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport forge from 'node-forge';\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n\r\n  const handleGenerateKey = async (username,password,salt) => {\r\n    \r\n    console.log(salt,password)\r\n    // Encode the password\r\n    const md = forge.md.sha256.create();\r\n    md.update(password+salt);\r\n    const seed = md.digest().toHex();\r\n  \r\n    // Create a PRNG instance with a fixed seed\r\n    const prng = forge.random.createInstance();\r\n    prng.seedFileSync = () => seed;\r\n  \r\n    // Generate RSA key pair using deterministic key generation\r\n    const { privateKey, publicKey } = forge.pki.rsa.generateKeyPair({ bits: 2048, prng });\r\n  \r\n    return {\r\n      salt:salt,\r\n      pubkey: forge.pki.publicKeyToPem(publicKey),\r\n      privkey: forge.pki.privateKeyToPem(privateKey),\r\n     \r\n    };\r\n   \r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      let {salt,pubkey,privkey} =await handleGenerateKey(data.name,password,data.salt)\r\n      \r\n    \r\n      data.privatekey = privkey\r\n    \r\n      setUser(data);\r\n      \r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      console.log(error)\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport forge from 'node-forge';\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n\r\n\r\n  const generateRandomString = (length) => {\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let result = '';\r\n    const charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const handleGenerateKey = async (username,password,) => {\r\n    let salt = generateRandomString(8)\r\n    console.log(salt,password)\r\n    // Encode the password\r\n    const md = forge.md.sha256.create();\r\n    md.update(password+salt);\r\n    const seed = md.digest().toHex();\r\n  \r\n    // Create a PRNG instance with a fixed seed\r\n    const prng = forge.random.createInstance();\r\n    prng.seedFileSync = () => seed;\r\n  \r\n    // Generate RSA key pair using deterministic key generation\r\n    const { privateKey, publicKey } = forge.pki.rsa.generateKeyPair({ bits: 2048, prng });\r\n  \r\n    return {\r\n      salt:salt,\r\n      pubkey: forge.pki.publicKeyToPem(publicKey),\r\n      privkey: forge.pki.privateKeyToPem(privateKey),\r\n      \r\n    };\r\n   \r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    \r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      \r\n     let {salt,pubkey,privkey} = await handleGenerateKey(name,password)\r\n      console.log(salt,pubkey)\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          salt,\r\n          pubkey,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      data.privatekey = privkey\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      console.log(error)\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n     \r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Chat Now\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n  \r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n              dangerouslySetInnerHTML={{ __html: m.content }}\r\n            >\r\n             \r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction,usero }) => {\r\nlet user;\r\n  if(usero){\r\n    console.log(usero)\r\n    user = usero\r\n  }\r\n\r\n  else{\r\n  user = ChatState();\r\n  }\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import forge from 'node-forge';\r\n\r\n\r\nasync function encryptMessage(message, publicKeyPem) {\r\n    try {\r\n      // Convert PEM-formatted public key to forge's public key object\r\n      const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\r\n  \r\n      // Encrypt the message using RSA-OAEP with MGF1-SHA256 and SHA-1\r\n      const encrypted = publicKey.encrypt(\r\n        forge.util.encodeUtf8(message),\r\n        'RSA-OAEP',\r\n        {\r\n          md: forge.md.sha256.create(),\r\n          mgf1: {\r\n            md: forge.md.sha1.create()\r\n          }\r\n        }\r\n      );\r\n  \r\n      // Convert the encrypted bytes to Base64 for easier handling\r\n      return forge.util.encode64(encrypted);\r\n    } catch (error) {\r\n      console.error('Encryption error:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  async function decryptMessage(encryptedMessage, privateKeyPem=JSON.parse(localStorage.getItem(\"userInfo\")).privatekey) {\r\n    try {\r\n      console.log(privateKeyPem)\r\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\r\n      const encryptedBytes = forge.util.decode64(encryptedMessage);\r\n      const decrypted = privateKey.decrypt(\r\n        encryptedBytes,\r\n        'RSA-OAEP',\r\n        {\r\n          md: forge.md.sha256.create(),\r\n          mgf1: {\r\n            md: forge.md.sha1.create(),\r\n          }\r\n        }\r\n      );\r\n      return forge.util.decodeUtf8(decrypted);\r\n    } catch (error) {\r\n      console.error('Decryption error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n  \r\n  export {encryptMessage,decryptMessage}","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { decryptMessage, encryptMessage } from \"./utils\";\r\nconst ENDPOINT = \"http://localhost:5555\"; \r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification,externalUsers } =\r\n    ChatState();\r\n\r\n\r\n    const getOtherPersonPublicKeyandName = async (payload) => {\r\n    \r\n      // Assume localStorage.getItem('myUserId') fetches your user ID from localStorage\r\n      const myUserId = JSON.parse(localStorage.getItem('userInfo'))._id;\r\n      console.log(\"find it\")\r\n      // Find the user whose public key is different from yours\r\n      const otherPerson = payload.users.find(user => user._id !== myUserId);\r\n      console.log(\"the other person is \",otherPerson)\r\n      return {otherpubkey:otherPerson.pubkey,name:otherPerson.name}\r\n      \r\n\r\n      \r\n    };\r\n\r\n    \r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n    \r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n\r\n      if(data){\r\n      for (let i=0;i<data.length;i++){\r\n       let  grp = false;\r\n        if (data[i]['chat']){\r\n       \r\n          grp = data[i]['chat']['isGroupChat']\r\n          console.log(data[i])\r\n        }\r\n        if (!grp){\r\n        if(data[i].sender._id == JSON.parse(localStorage.getItem(\"userInfo\"))._id){\r\n          data[i].content = await decryptMessage(data[i].encmecontent)\r\n        }\r\n        else{\r\n          data[i].content = await decryptMessage(data[i].enccontent)\r\n        }\r\n      }\r\n      else{\r\n        \r\n        data[i].content = data[i].content\r\n      }\r\n      }\r\n\r\n      }\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      console.log(error)\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n   \r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n      \r\n        console.log(\"the selected chat is\", selectedChat)\r\n        let data = \"\"\r\n        if (!selectedChat.isGroupChat){\r\n        let {otherpubkey,name} =await getOtherPersonPublicKeyandName(selectedChat)\r\n        \r\n        let pubkey = JSON.parse(localStorage.getItem('userInfo')).pubkey\r\n        const person = externalUsers.find(person => person.name === name);\r\n\r\n        if (person){\r\n          otherpubkey = person.pubkey\r\n          console.log(\"changed pubkey\" +otherpubkey)\r\n        }\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n         data = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            enccontent:await encryptMessage(newMessage,otherpubkey),\r\n            encmecontent: await encryptMessage(newMessage,pubkey),\r\n            chatId: selectedChat,\r\n            name:name\r\n          },\r\n          config\r\n        );\r\n      }else{\r\n\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n         data  = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            enccontent:\"public\",\r\n            encmecontent: \"public\",\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n            name:\"Public\"\r\n          },\r\n          config\r\n        );\r\n      \r\n\r\n\r\n\r\n      }\r\n     data = data.data\r\n     console.log(data)\r\n      let grp = false\r\n        if (data['chat']){\r\n          \r\n          if (data['chat'].isGroupChat){\r\n            grp=true\r\n          }\r\n\r\n\r\n        }\r\n        if (grp){\r\n          data.content = data.content\r\n        }\r\n        else{\r\n        if(data.sender._id == JSON.parse(localStorage.getItem(\"userInfo\"))._id){\r\n          data.content = await decryptMessage(data.encmecontent)\r\n        }\r\n        else{\r\n          data.content = await decryptMessage(data.enccontent)\r\n        }\r\n      }\r\n  \r\n        setMessages([...messages, data]);\r\n        socket.emit(\"new message\", data);\r\n        socket.emit(\"get user\",{name:\"hell\"})\r\n     \r\n      } catch (error) {\r\n        console.log(error)\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n  \r\n    console.log(ENDPOINT)\r\n    socket = io(ENDPOINT,{'path':'/socket'});\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () =>{ \r\n      \r\n      setSocketConnected(true)});\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n    // Cleanup function to close socket connection\r\n  return () => {\r\n    socket.close();\r\n  };\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", async (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        let grp2 = false\r\n        if (newMessageRecieved['chat']){\r\n          if (newMessageRecieved['chat'].isGroupChat){\r\n            grp2 = true;\r\n          }\r\n        \r\n        }\r\n        if (grp2){\r\n          newMessageRecieved.content = newMessageRecieved.content\r\n        }\r\n        else{\r\n        if(newMessageRecieved.sender._id == JSON.parse(localStorage.getItem(\"userInfo\"))._id){\r\n          newMessageRecieved.content = await decryptMessage(newMessageRecieved.encmecontent)\r\n        }\r\n        else{\r\n          newMessageRecieved.content = await decryptMessage(newMessageRecieved.enccontent)\r\n        }}\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, karthi, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { encryptMessage,decryptMessage } from \"./utils\";\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      if(data){\r\n      console.log(\"passsing through here\")\r\n      for (let i=0;i<data.length;i++){\r\n        console.log(data)\r\n        if (data[i].latestMessage){\r\n        if(data[i].latestMessage.sender._id == JSON.parse(localStorage.getItem(\"userInfo\"))._id){\r\n          data[i].latestMessage.content = await decryptMessage(data[i].latestMessage.encmecontent)\r\n        }\r\n      \r\n        else{\r\n         \r\n          \r\n          data[i].latestMessage.content = await decryptMessage(data[i].latestMessage.enccontent)\r\n          \r\n        }\r\n      }\r\n      }}\r\n\r\n      console.log(data)\r\n      setChats(data);\r\n    } catch (error) {\r\n      console.log(error)\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                  \r\n                       {chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data)\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n     \r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n         Chat Now !\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((usero) => (\r\n                <UserListItem\r\n                  key={usero._id}\r\n                  usero={usero}\r\n                  handleFunction={() => accessChat(usero._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport ChatLoading from \"./ChatLoading\";\r\n\r\nconst OnlineUsers = ({ fetchAgain }) => {\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const { user,externalUsers,setExternalusers } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchOnlineUsers = async () => {\r\n    console.log(\"online users fetched\")\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat/online\", config);\r\n      setOnlineUsers(data);\r\n      setExternalusers(data);\r\n    \r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to load the online users\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOnlineUsers(); // Fetch immediately on mount\r\n\r\n    const interval = setInterval(fetchOnlineUsers, 5000); // Fetch every 5 seconds\r\n\r\n    return () => clearInterval(interval); // Cleanup on unmount\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d=\"flex\"\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w=\"30%\"\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        Online Users\r\n        <Button\r\n          onClick={fetchOnlineUsers}\r\n          fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {onlineUsers.length > 0 ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {onlineUsers.map((user) => (\r\n              <Box\r\n                cursor=\"pointer\"\r\n                bg=\"#E8E8E8\"\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={user._id}\r\n              >\r\n                <Text>\r\n                 \r\n                  {user.name}\r\n                </Text>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default OnlineUsers;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport OnlineUsers from \"../components/OnlineUsers\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n          \r\n        )}\r\n        {user && <OnlineUsers  fetchAgain={fetchAgain} ></OnlineUsers>}\r\n\r\n        \r\n      </Box>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}